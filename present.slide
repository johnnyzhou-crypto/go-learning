Thinking In Web
Oct 2022

Johnny Zhou
johnny.zhou@crypto.com
https://crypto.com/


* Introduction
Go-chi
Context
Error handling


* Go-chi
Start from simple Http Server
.play chi/simpleHttp.go /START_OMIT/,/END_OMIT/

* Working mechanism
- ListenAndServe
- HandleFunc

* ListenAndServe
- Listen function
Listening local port using Listen function

- Server
Implementing Server structure


* HandleFunc
- Every request is routing to its HandleFunc to handle.
- Every Http server instance has a ServerMux, transfer pattern to every handleFunc
``
type ServeMux struct {
 mu    sync.RWMutex                 // read write lock, simultaneous
 m     map[string]muxEntry          // rules to handler map
 es    []muxEntry // slice of entries sorted from longest to shortest.
 hosts bool // whether any patterns contain hostnames
}
``
``
type muxEntry struct {
   h       Handler  // customised handler function, defined by user
   pattern string   // rule matching pattern
}
``

* Http Server in general
- http.ListenAndServe
- http.ServeMux
- http.Handler

* http.ListenAndServe
1. listening port
2. decode requests
3. save Mux/Router for routing procedure

* http.ServeMux
1. pattern and handler processing
2. mapping handler using pattern
3. implementing handler to match url to target handler

* http.Handler
1. implementing ServeHTTP to handle requests
2. transfer request function to http.Handler using HandlerFunc


* What is context
context.Background is the default, other child contexts are derived from it.

- Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests.

- TODO returns a non-nil, empty Context. Code should use context. TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter).


* Context
- Specifically, its the context of the goroutine, which contains the running status and env configs, since Go 1.7.
- Passing information, such as cancellation signal, timeout, deadline, k-v.
- for simultaneous and HTTP request controlling, many libs use context as the first parameter. (e.g., sqlc lib)
- To sum up, Context is used for delivering meta data and inform of the goroutine.

* But why has Context?
.image images/context.png _ 600
https://blog.csdn.net/pengpengzhou/article/details/107123560

* Context brief
``
type Context interface {
	Deadline() (deadline time.Time, ok bool)
	Done() <-chan struct{}
	Err() error
	Value(key interface{}) interface{}
}
``

* Context tree
.image images/img.png _ 600

* Context tree
.image images/contextTree.png _ 600

* Context usage
- Cancellation signals
- Deadline
- Timeout
- Passing value

* Cancellation signals
As channel usage, once a goroutine received a signal, it should be stopped and return. contex.WithCancel() provides this cancellation signal.

* Deadline
.play -edit context/context_deadline.go /START_OMIT/,/END_OMIT/

* Timeout
.play context/context_timeout.go /START_OMIT/,/END_OMIT/

* Passing value
.play -edit context/example/passing_value.go /START_OMIT/,/END_OMIT/

* Context value
emptyCtx is the root
.image images/values.png _ 600



* In general
- Do not store Contexts inside a struct type; instead, pass a Context explicitly to each function that needs it. The Context should be the first parameter, typically named ctx.
- Do not pass a nil Context, even if a function permits it. Pass context.TODO if you are unsure about which Context to use.
- Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.
- The same Context may be passed to functions running in different goroutines; Contexts are safe for simultaneous use by multiple goroutines.

* Error
Compare with java

* Compare with Java
- Exceptions
RuntimeException(unchecked)
other exceptions(checked)

- Error
such as OutOfMemoryError, LinkageError and StackOverflowError.

* Golang
- panic
error to panic. (e.g., request timeout)

- recover
panic to error (e.g., division 1/0)







* errors package
- New
- panic
- recover
- unwrap
- Is



* error handling example
- kratos

- kitex
https://github.com/cloudwego/kitex-examples/blob/main/bizdemo/easy_note/pkg/errno/errno.go

- three layout strategy
wrap -> withMessage -> controller

- etc..


* references:
https://github.com/gorilla/mux
https://go.dev/blog/go1.13-errors
https://studygolang.com/articles/31643
https://www.zhihu.com/question/27158146
https://chai2010.cn/advanced-go-programming-book/ch5-web/ch5-01-introduction.html
https://blog.csdn.net/pengpengzhou/article/details/107123560
https://zhuanlan.zhihu.com/p/68792989
https://juejin.cn/post/7085190229782429727
etc

